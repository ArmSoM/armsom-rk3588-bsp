SHELL=/bin/bash
GST_V4L2_PREFERRED_FOURCC=NV12:YU12:NV16:YUY2
GST_VIDEO_CONVERT_PREFERRED_FORMAT=NV12:NV16:I420:YUY2
GST_MPP_NO_RGA=1
GST_GL_PLATFORM=egl
COGL_DRIVER=gles2
LANGUAGE=zh_CN:en
GST_V4L2_USE_LIBV4L2=1
LC_ADDRESS=zh_CN.UTF-8
LC_NAME=zh_CN.UTF-8
GST_INSPECT_NO_COLORS=1
LC_MONETARY=zh_CN.UTF-8
GST_DEBUG_NO_COLOR=1
PWD=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6
LOGNAME=lhd
XDG_SESSION_TYPE=tty
MOTD_SHOWN=pam
HOME=/home/lhd
LANG=C.UTF-8
LC_PAPER=zh_CN.UTF-8
SSH_CONNECTION=192.168.100.195 62225 192.168.100.192 22
GST_V4L2SRC_DEFAULT_DEVICE=/dev/video-camera0
QT_XCB_GL_INTEGRATION=xcb_egl
XDG_SESSION_CLASS=user
TERM=xterm
LC_IDENTIFICATION=zh_CN.UTF-8
USER=lhd
GST_V4L2SRC_RK_DEVICES=_mainpath:_selfpath:_bypass:_scale
DISPLAY=localhost:11.0
SHLVL=2
LC_TELEPHONE=zh_CN.UTF-8
LC_MEASUREMENT=zh_CN.UTF-8
GST_GL_API=gles2
XDG_SESSION_ID=401
XDG_RUNTIME_DIR=/run/user/1001
SSH_CLIENT=192.168.100.195 62225 22
LC_TIME=zh_CN.UTF-8
XDG_DATA_DIRS=/usr/share/gnome:/usr/local/share:/usr/share:/var/lib/snapd/desktop
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
QTWEBENGINE_CHROMIUM_FLAGS=--no-sandbox --disable-es3-gl-context --ignore-gpu-blacklist --ignore-gpu-blocklist --enable-accelerated-video-decode
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1001/bus
SSH_TTY=/dev/pts/0
GST_V4L2SRC_MAX_RESOLUTION=3840x2160
LC_NUMERIC=zh_CN.UTF-8
OLDPWD=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/u-boot
BASH_FUNC_check_config%%=() {  unset missing;
 for var in $@;
 do
 eval [ \$$var ] && continue;
 missing="$missing $var";
 done;
 [ -z "$missing" ] && return 0;
 echo "Skipping $(basename "${BASH_SOURCE[1]}") - ${FUNCNAME[1]} for missing configs: $missing.";
 return 1
}
BASH_FUNC_kernel_version_real%%=() {  [ -d kernel ] || return 0;
 VERSION_KEYS="VERSION PATCHLEVEL";
 VERSION="";
 for k in $VERSION_KEYS;
 do
 v=$(grep "^$k = " kernel/Makefile | cut -d' ' -f3);
 VERSION=${VERSION:+${VERSION}.}$v;
 done;
 echo $VERSION
}
BASH_FUNC_get_toolchain%%=() {  TOOLCHAIN_ARCH="${1/arm64/aarch64}";
 MACHINE=$(uname -m);
 if [ "$MACHINE" = x86_64 ]; then
 TOOLCHAIN_VENDOR="${2:-none}";
 TOOLCHAIN_OS="${3:-linux}";
 if [ "$RK_CHIP_FAMILY" = "rv1126_rv1109" ]; then
 TOOLCHAIN_VENDOR=rockchip;
 fi;
 TOOLCHAIN_DIR="$(realpath 			$SDK_DIR/prebuilts/gcc/*/$TOOLCHAIN_ARCH)";
 GCC="$(find "$TOOLCHAIN_DIR"/*/bin -name "*gcc" 2>/dev/null | 			grep -m 1 "$TOOLCHAIN_VENDOR-$TOOLCHAIN_OS-[^-]*-gcc")";
 if [ ! -x "$GCC" ]; then
 echo "No prebuilt GCC toolchain!";
 exit 1;
 fi;
 else
 if [ "$TOLLCHAIN_ARCH" = aarch64 -a "$MACHINE" != aarch64 ]; then
 GCC=aarch64-linux-gnu-gcc;
 else
 if [ "$TOLLCHAIN_ARCH" = arm -a "$MACHINE" != armv7l ]; then
 GCC=arm-linux-gnueabihf-gcc;
 else
 GCC=gcc;
 fi;
 fi;
 fi;
 echo "${GCC%gcc}"
}
BASH_FUNC_load_config%%=() {  [ -r "$RK_CONFIG" ] || return 0;
 for var in $@;
 do
 export $(grep "^$var=" "$RK_CONFIG" | 			tr -d '"' || true) &> /dev/null;
 done
}
BASH_FUNC_rroot%%=() {  cd "$SDK_DIR"
}
BASH_FUNC_start_log%%=() {  LOG_FILE="$RK_LOG_DIR/${2:-$1_$(date +%F_%H-%M-%S)}.log";
 ln -rsf "$LOG_FILE" "$RK_LOG_DIR/$1.log";
 echo "# $(date +"%F %T")" >> "$LOG_FILE";
 echo "$LOG_FILE"
}
BASH_FUNC_finish_build%%=() {  echo -e "\e[35mRunning $(basename "${BASH_SOURCE[1]}") - ${@:-${FUNCNAME[1]}} succeeded.\e[0m";
 cd "$SDK_DIR"
}
BASH_FUNC_rscript%%=() {  cd "$SCRIPTS_DIR"
}
BASH_FUNC_rout%%=() {  cd "$RK_OUTDIR"
}
BASH_FUNC_rcommon%%=() {  cd "$COMMON_DIR"
}
BASH_FUNC_rchip%%=() {  cd "$(realpath "$CHIP_DIR")"
}
BASH_FUNC_kernel_version%%=() {  [ -d kernel ] || return 0;
 KERNEL_DIR="$(basename "$(realpath kernel)")";
 case "$KERNEL_DIR" in 
 kernel-*)
 echo ${KERNEL_DIR#kernel-};
 return 0
 ;;
 esac;
 kernel_version_real
}
_=/usr/bin/env
