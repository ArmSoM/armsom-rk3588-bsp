SHELL=/bin/bash
RK_EXTRA_PARTITION_1_NAME=<dev>
GST_V4L2_PREFERRED_FOURCC=NV12:YU12:NV16:YUY2
RK_USB_ADBD_TCP_PORT=5555
RK_KERNEL_CFG=rockchip_linux_defconfig
GST_VIDEO_CONVERT_PREFERRED_FORMAT=NV12:NV16:I420:YUY2
RK_LOG_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/output/sessions/2024-03-20_14-05-41
RK_DEFCONFIG=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip/.chips/rk3588/rockchip_rk3588_sige7_defconfig
GST_MPP_NO_RGA=1
RK_KERNEL_VERSION_REAL=5.10
RK_EXTRA_PARTITION_2_MOUNTPOINT_STR=/userdata
RK_KERNEL_ARM64=y
RK_LOG_BASE_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/output/log
RK_KERNEL_KBUILD_HOST=y
DEVICE_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip
BUILD_HELPER=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip/common/build-hooks/build-helper
RK_EXTRA_PARTITION_2_FEATURES=
RK_EXTRA_PARTITION_1_OPTIONS=defaults
RK_USB_EXTRA=
GST_GL_PLATFORM=egl
COGL_DRIVER=gles2
RK_DEBIAN_VERSION=bullseye
LANGUAGE=zh_CN:en
RK_ROOTFS_TYPE=ext4
RK_UBOOT_INI=
MAKE_TERMOUT=/dev/pts/0
PARAMETER=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip/.chip/parameter.txt
RK_UPDATE=y
GST_V4L2_USE_LIBV4L2=1
LC_ADDRESS=zh_CN.UTF-8
RK_RECOVERY_FIT_ITS=boot4recovery.its
LC_NAME=zh_CN.UTF-8
GST_INSPECT_NO_COLORS=1
RK_YOCTO_CHROMIUM=y
RK_ROOTFS_LOCALE_DEFAULT=y
RK_DISK_HELPERS_DEFAULT=y
RK_EXTRA_PARTITION_2_OPTIONS=defaults
RK_YOCTO_USBMOUNT=y
COMMON_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip/common
RK_SESSION=2024-03-20_14-05-41
LC_MONETARY=zh_CN.UTF-8
RK_OUTDIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/output
RK_EXTRA_PARTITION_STR=oem:oem:/oem:ext4:defaults:normal:auto:@userdata:userdata:/userdata:ext4:defaults:normal:auto:@@@
GST_DEBUG_NO_COLOR=1
PWD=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6
RK_FINAL_ENV=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/output/sessions/2024-03-20_14-05-41/final.env
LOGNAME=lhd
XDG_SESSION_TYPE=tty
RK_ROOTFS_OVERLAY_DIRS=y
RK_EXTRA_PARTITION_2_SRC=normal
RK_USE_FIT_IMG=y
PART_TABLE=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/output/sessions/2024-03-20_14-05-41/part-table
RK_UBOOT_ARM64=y
RK_CHIP=rk3588
RK_CONFIG_IN=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip/common/configs/Config.in
HOSTCC=gcc
Q=@
RK_RECOVERY_BASE_CFG=rk3588
CHIP_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip/.chip
PYTHON3=/usr/bin/python3
RK_ROOTFS_INPUT_EVENT_DAEMON_DEFAULT=y
RK_EXTRA_PARTITION_1_FSTYPE=ext4
MOTD_SHOWN=pam
RK_KERNEL_DTS_DIR=kernel/arch/arm64/boot/dts/rockchip
LINES=60
PARTITION_HELPER=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip/common/scripts/partition-helper
HOME=/home/lhd
RK_KERNEL_CFG_FRAGMENTS=rk3588_linux.config
RK_MISC=y
LANG=C.UTF-8
LC_PAPER=zh_CN.UTF-8
RK_PCBA_BASE_CFG=rk3588
RK_INITIAL_ENV=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/output/sessions/2024-03-20_14-05-41/initial.env
COLUMNS=203
RK_ROOTFS_UDEV_RULES=y
RK_USB_ADBD_BASH=y
RK_EXTRA_PARTITION_2_FSTYPE=ext4
RK_BUILDROOT_BASE_CFG=rk3588
SCRIPTS_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip/common/scripts
RK_USB_ADBD_RSA_KEY=
HDR_PART=<hidden>
RK_EXTRA_PARTITION_2_NAME=<dev>
RK_EXTRA_PARTITION_2_DEV=userdata
SDK_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6
RK_MISC_BLANK=y
RK_SAVE_TRACKED=y
RK_EXTRA_PARTITION_1_SIZE=auto
RK_KERNEL_ARCH=arm64
SSH_CONNECTION=192.168.100.195 62225 192.168.100.192 22
RK_FIRMWARE_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/output/firmware
RK_EXTRA_FONTS_DEFAULT=y
RK_DEBIAN_ARM64=y
RK_EXTRA_PARTITION_1_SRC=normal
RK_EXTRA_PARTITION_1_MOUNTPOINT_STR=/oem
RK_KERNEL_DTB=kernel/arch/arm64/boot/dts/rockchip/rk3588-armsom-sige7.dtb
GST_V4L2SRC_DEFAULT_DEVICE=/dev/video-camera0
MFLAGS=
RK_KERNEL_IMG_NAME=Image
RK_KERNEL_DTS=kernel/arch/arm64/boot/dts/rockchip/rk3588-armsom-sige7.dts
RK_EXTRA_PARTITION_1_DEV=oem
RK_PACKAGE_FILE_DEFAULT=y
QT_XCB_GL_INTEGRATION=xcb_egl
RK_ROOTFS_SYSTEM=buildroot
RK_ROOTFS_IRQBALANCE=y
RK_KBUILD_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip/common/linux-kbuild
RK_BOOT_IMG=boot.img
MAKEFLAGS=
XDG_SESSION_CLASS=user
RK_IMAGE_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip/common/images
RK_EXTRA_PARTITION_2_SIZE=auto
RK_YOCTO_CFG=rockchip-rk3588-evb
RK_UBOOT_CFG_FRAGMENTS=
TERM=xterm
LC_IDENTIFICATION=zh_CN.UTF-8
RK_POST_HOOK_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip/common/post-hooks
USER=lhd
HOSTCXX=g++
RK_EXTRA_PARTITION_2_STR=userdata:userdata:/userdata:ext4:defaults:normal:auto:
MAKE_TERMERR=/dev/pts/0
RK_DEBIAN_ARCH=arm64
GST_V4L2SRC_RK_DEVICES=_mainpath:_selfpath:_bypass:_scale
RK_KERNEL_KBUILD_ARCH=host
RK_EXTRA_PARTITION_2_MOUNTPOINT=/<name>
DISPLAY=localhost:11.0
RK_BUILDROOT_CFG=rockchip_rk3588
RK_UBOOT_TRUST_INI=
SHLVL=2
POST_HELPER=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip/common/post-hooks/post-helper
RK_EXTRA_PARTITION_NUM=2
RK_EXTRA_PARTITION_2_NAME_STR=userdata
MAKELEVEL=1
LC_TELEPHONE=zh_CN.UTF-8
RK_WIFIBT_CHIP=ALL_AP
KBUILD_VERBOSE=0
RK_EXTRA_PARTITION_1_MOUNTPOINT=/<name>
LC_MEASUREMENT=zh_CN.UTF-8
GST_GL_API=gles2
RK_UBOOT_ARCH=arm64
XDG_SESSION_ID=401
RK_CHIP_FAMILY=rk3588
RK_BUILD_HOOK_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip/common/build-hooks
RK_BOOT_FIT_ITS=boot.its
RK_DEFCONFIG_LINK=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/output/defconfig
RK_YOCTO_DISPLAY_PLATFORM_WAYLAND=y
RK_YOCTO_DISPLAY_PLATFORM=wayland
RK_UBOOT_CFG=rk3588
RK_KERNEL_DTS_NAME=rk3588-armsom-sige7
RK_PARAMETER=parameter.txt
RK_RECOVERY_CFG=rockchip_rk3588_recovery
XDG_RUNTIME_DIR=/run/user/1001
RK_PCBA_CFG=rockchip_rk3588_pcba
RK_KERNEL_IMG=kernel/arch/arm64/boot/Image
RK_DATA_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip/common/data
SSH_CLIENT=192.168.100.195 62225 22
RK_EXTRA_PARTITION_1_FEATURES=
LC_TIME=zh_CN.UTF-8
LC_ALL=C
CHIPS_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip/.chips
XDG_DATA_DIRS=/usr/share/gnome:/usr/local/share:/usr/share:/var/lib/snapd/desktop
RK_ROOTFS_SYSTEM_BUILDROOT=y
RK_CUSTOM_ENV=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/output/sessions/2024-03-20_14-05-41/custom.env
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
RK_EXTRA_PARTITION_1_STR=oem:oem:/oem:ext4:defaults:normal:auto:
RK_EXTRA_PARTITION_1_NAME_STR=oem
RK_TOOL_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/device/rockchip/common/tools
QTWEBENGINE_CHROMIUM_FLAGS=--no-sandbox --disable-es3-gl-context --ignore-gpu-blacklist --ignore-gpu-blocklist --enable-accelerated-video-decode
RK_USB_ADBD_PASSWORD=
RK_CONFIG=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/output/.config
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1001/bus
RK_USB_DEFAULT=y
SSH_TTY=/dev/pts/0
PARTS=0x00002000@0x00004000(uboot),0x00002000@0x00006000(misc),0x00020000@0x00008000(boot),0x00040000@0x00028000(recovery),0x00010000@0x00068000(backup),0x01c00000@0x00078000(rootfs),0x00040000@0x01c78000(oem),-@0x01cb8000(userdata:grow)
GST_V4L2SRC_MAX_RESOLUTION=3840x2160
RK_USB_ADBD=y
RK_ROCKDEV_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/rockdev
CONFIG_SHELL=/bin/bash
RK_SESSION_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/output/sessions
RK_UBOOT_OPTS=
LC_NUMERIC=zh_CN.UTF-8
RK_ROOTFS_HOSTNAME_DEFAULT=y
OLDPWD=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/output/log
RK_USB_HOOKS=
RK_SECURITY_FIRMWARE_DIR=/home/lhd/project/3588/work/github_sdk/linux5.10-rkr6/output/security-firmware
RK_KERNEL_VERSION=5.10
RK_ROOTFS_EXTRA_OVERLAY_DIRS=
BASH_FUNC_check_config%%=() {  unset missing;
 for var in $@;
 do
 eval [ \$$var ] && continue;
 missing="$missing $var";
 done;
 [ -z "$missing" ] && return 0;
 echo "Skipping $(basename "${BASH_SOURCE[1]}") - ${FUNCNAME[1]} for missing configs: $missing.";
 return 1
}
BASH_FUNC_rk_partition_size_sector_to_readable%%=() {  case "${1:-grow}" in 
 - | 0 | grow)
 echo grow;
 return 0
 ;;
 esac;
 SIZE=$(( $1 * 512 ));
 if [ "$SIZE" -lt 1024 ]; then
 echo $SIZE;
 else
 if [ "$SIZE" -ge $(( 1024 * 1024 * 1024 )) ]; then
 echo "$(echo "scale=1; $SIZE / 1024 / 1024 / 1024" | bc | 			sed 's/\.0$//')G";
 else
 if [ "$SIZE" -ge $(( 1024 * 1024 )) ]; then
 echo "$(echo "scale=1; $SIZE / 1024 / 1024" | bc | 			sed 's/\.0$//')M";
 else
 echo "$(echo "scale=1; $SIZE / 1024" | bc | 			sed 's/\.0$//')K";
 fi;
 fi;
 fi
}
BASH_FUNC_rk_extra_part_options%%=() {  rk_extra_part_arg ${1:-1} 5 defaults
}
BASH_FUNC_rk_partition_edit%%=() {  sed -i '1i # name size' "$PART_TABLE";
 eval ${EDITOR:-vi} "$PART_TABLE";
 sed -i '/#/d' "$PART_TABLE";
 rk_partition_save
}
BASH_FUNC_rk_extra_part_arg%%=() {  PART="$(rk_extra_part_cfg ${1:-1})";
 ARG="$(echo "$PART" | cut -d':' -f${2:-1})";
 echo "${ARG:-$3}"
}
BASH_FUNC_kernel_version_real%%=() {  [ -d kernel ] || return 0;
 VERSION_KEYS="VERSION PATCHLEVEL";
 VERSION="";
 for k in $VERSION_KEYS;
 do
 v=$(grep "^$k = " kernel/Makefile | cut -d' ' -f3);
 VERSION=${VERSION:+${VERSION}.}$v;
 done;
 echo $VERSION
}
BASH_FUNC_rk_extra_part_src%%=() {  PART_NAME="$(rk_extra_part_name $1)";
 for src in $(rk_extra_part_arg ${1:-1} 6 | tr ',' ' ');
 do
 if [ -z "$src" -o "$src" = empty ]; then
 return 0;
 else
 if echo "$src" | grep -q "^/"; then
 echo "$src";
 else
 if [ -d "$RK_IMAGE_DIR/$PART_NAME/$src" ]; then
 echo "$RK_IMAGE_DIR/$PART_NAME/$src";
 else
 echo "$RK_IMAGE_DIR/$src";
 fi;
 fi;
 fi;
 done
}
BASH_FUNC_rk_extra_part_cfg%%=() {  [ "$RK_EXTRA_PARTITION_STR" ] || return 0;
 RK_EXTRA_PARTITION_ARRAY=($(echo ${RK_EXTRA_PARTITION_STR//@/ } | 		xargs -n 1 | sort));
 PART_IDX=$(( ${1:-1} - 1 ));
 echo "${RK_EXTRA_PARTITION_ARRAY[$PART_IDX]}"
}
BASH_FUNC_rk_extra_part_num%%=() {  echo ${RK_EXTRA_PARTITION_NUM:-0}
}
BASH_FUNC_rk_extra_part_mountpoint%%=() {  rk_extra_part_arg ${1:-1} 3 "/$(rk_extra_part_name $1)"
}
BASH_FUNC_get_toolchain%%=() {  TOOLCHAIN_ARCH="${1/arm64/aarch64}";
 MACHINE=$(uname -m);
 if [ "$MACHINE" = x86_64 ]; then
 TOOLCHAIN_VENDOR="${2:-none}";
 TOOLCHAIN_OS="${3:-linux}";
 if [ "$RK_CHIP_FAMILY" = "rv1126_rv1109" ]; then
 TOOLCHAIN_VENDOR=rockchip;
 fi;
 TOOLCHAIN_DIR="$(realpath 			$SDK_DIR/prebuilts/gcc/*/$TOOLCHAIN_ARCH)";
 GCC="$(find "$TOOLCHAIN_DIR"/*/bin -name "*gcc" 2>/dev/null | 			grep -m 1 "$TOOLCHAIN_VENDOR-$TOOLCHAIN_OS-[^-]*-gcc")";
 if [ ! -x "$GCC" ]; then
 echo "No prebuilt GCC toolchain!";
 exit 1;
 fi;
 else
 if [ "$TOLLCHAIN_ARCH" = aarch64 -a "$MACHINE" != aarch64 ]; then
 GCC=aarch64-linux-gnu-gcc;
 else
 if [ "$TOLLCHAIN_ARCH" = arm -a "$MACHINE" != armv7l ]; then
 GCC=arm-linux-gnueabihf-gcc;
 else
 GCC=gcc;
 fi;
 fi;
 fi;
 echo "${GCC%gcc}"
}
BASH_FUNC_rk_extra_part_fakeroot_script%%=() {  echo "$(rk_extra_part_outdir $1).fs"
}
BASH_FUNC_rk_partition_size%%=() {  grep -E "^$1(|_[a-z]) " "$PART_TABLE" | cut -d' ' -f2 | tr -d '\-' | sort | head -n 1 || true
}
BASH_FUNC_load_config%%=() {  [ -r "$RK_CONFIG" ] || return 0;
 for var in $@;
 do
 export $(grep "^$var=" "$RK_CONFIG" | 			tr -d '"' || true) &> /dev/null;
 done
}
BASH_FUNC_rk_partition_insert%%=() {  [ "$#" -gt 1 ] || return 1;
 echo $1 | grep -qE "^[0-9]*$" || return 1;
 IDX=$1;
 if [ "$IDX" -lt 1 ]; then
 echo -e "\e[35mIndex should not be less than 1!\e[0m";
 return 1;
 fi;
 NUM=$(rk_partition_num);
 if [ "$IDX" -gt "$(($NUM + 1))" ]; then
 echo -e "\e[35mIndex should not be greater than $(($NUM + 1))!\e[0m";
 return 1;
 fi;
 echo $2 | grep -qE "^[a-zA-Z]" || return 1;
 if rk_partition_parse_name $2 > /dev/null; then
 echo -e "\e[35mPart already exists ($2)!\e[0m";
 return 1;
 fi;
 case "${3:-grow}" in 
 0x*)
 SIZE=$3
 ;;
 *)
 SIZE="$(rk_partition_size_readable_to_sector $3)"
 ;;
 esac;
 if [ "$SIZE" = "-" ] && [ "$IDX" -lt "$(( $NUM + 1 ))" ]; then
 echo -e "\e[35mOnly latest part can be unlimited!\e[0m";
 return 1;
 fi;
 if [ "$IDX" -eq "$(( $NUM + 1 ))" ] && grep -q "\-$" "$PART_TABLE"; then
 echo -e "\e[35mCannot insert after unlimited part!\e[0m";
 return 1;
 fi;
 sed -i "$IDX a$2 $SIZE" "$PART_TABLE";
 rk_partition_save
}
BASH_FUNC_rk_partition_del%%=() {  [ "$#" -gt 0 ] || return 1;
 rk_partition_parse_name $1 || return 1;
 sed -i "/^$PART_NAME /d" "$PART_TABLE";
 rk_partition_save
}
BASH_FUNC_rk_partition_parse_name%%=() {  unset PART_NAME;
 [ "$#" -eq 1 ] || return 1;
 if ! echo $1 | grep -qE "^[0-9]*$"; then
 if ! grep -q "^$1 " "$PART_TABLE"; then
 echo -e "\e[35mNo such part ($1)!\e[0m";
 return 1;
 fi;
 PART_NAME=$1;
 return 0;
 fi;
 IDX=$1;
 if [ "$IDX" -lt 1 ]; then
 echo -e "\e[35mIndex should not be less than 1!\e[0m";
 return 1;
 fi;
 NUM=$(rk_partition_num);
 if [ "$IDX" -gt "$NUM" ]; then
 echo -e "\e[35mIndex should not be greater than $NUM!\e[0m";
 return 1;
 fi;
 PART_NAME=$(sed -n "$(($IDX + 1))s/\(^[^ ]*\) .*/\1/p" "$PART_TABLE")
}
BASH_FUNC_rk_extra_part_fstype%%=() {  rk_extra_part_arg ${1:-1} 4 ext4
}
BASH_FUNC_rk_partition_print%%=() {  echo;
 echo "==========================================";
 echo "          Partition table";
 echo "==========================================";
 { 
 OFFSET=0;
 while read NAME SIZE; do
 OFFSET=$(echo $OFFSET | awk '{printf "0x%08x",$1}');
 SIZE_STR=$(rk_partition_size_sector_to_readable $SIZE);
 if [ "$NAME" != "$HDR_PART" ]; then
 NAME=$(echo $NAME | awk '{printf "%12s",$1}');
 echo -e "$NAME at $OFFSET size=$SIZE($SIZE_STR)";
 fi;
 OFFSET=$(( $OFFSET + ${SIZE/-/0} ));
 done < "$PART_TABLE"
 } | sed "=" | sed "N;s/\n/: /";
 echo;
 echo "Legacy cmdline:";
 rk_partition_to_cmdline;
 echo
}
BASH_FUNC_rk_extra_part_mount_dir%%=() {  echo "$RK_OUTDIR/$(rk_extra_part_name $1)-mount"
}
BASH_FUNC_rk_extra_part_size%%=() {  rk_extra_part_arg ${1:-1} 7 auto
}
BASH_FUNC_rk_extra_part_outdir%%=() {  echo "$RK_OUTDIR/$(rk_extra_part_name $1)"
}
BASH_FUNC_rroot%%=() {  cd "$SDK_DIR"
}
BASH_FUNC_rk_partition_rename%%=() {  [ "$#" -gt 1 ] || return 1;
 echo $2 | grep -qE "^[a-zA-Z]" || return 1;
 if rk_partition_parse_name $2 > /dev/null; then
 echo -e "\e[35mPart already exists ($2)!\e[0m";
 return 1;
 fi;
 rk_partition_parse_name $1 || return 1;
 sed -i "s/^$PART_NAME /$2 /" "$PART_TABLE";
 rk_partition_save
}
BASH_FUNC_rk_partition_to_cmdline%%=() {  OFFSET=0;
 while read NAME SIZE; do
 case "$SIZE" in 
 -)
 echo "$NAME $OFFSET" | awk '{printf "-@0x%08x(%s:grow)",$2,$1}';
 break
 ;;
 *)
 SIZE=$(rk_partition_size_readable_to_sector $SIZE)
 ;;
 esac;
 if [ "$NAME" != "$HDR_PART" ]; then
 echo "$NAME $OFFSET $(( $SIZE ))" | awk '{printf "0x%08x@0x%08x(%s)",$3,$2,$1}';
 fi;
 OFFSET=$(( $OFFSET + $SIZE ));
 done < "$PART_TABLE" | sed 's/)\([^$]\)/),\1/g'
}
BASH_FUNC_start_log%%=() {  LOG_FILE="$RK_LOG_DIR/${2:-$1_$(date +%F_%H-%M-%S)}.log";
 ln -rsf "$LOG_FILE" "$RK_LOG_DIR/$1.log";
 echo "# $(date +"%F %T")" >> "$LOG_FILE";
 echo "$LOG_FILE"
}
BASH_FUNC_rk_partition_init%%=() {  rk_partition_parse > "$PART_TABLE"
}
BASH_FUNC_rk_partition_resize%%=() {  [ "$#" -gt 1 ] || return 1;
 case "$2" in 
 0x*)
 SIZE=$2
 ;;
 *)
 SIZE="$(rk_partition_size_readable_to_sector $2)"
 ;;
 esac;
 rk_partition_parse_name $1 || return 1;
 sed -i "s/^$PART_NAME .*/$PART_NAME $SIZE/" "$PART_TABLE";
 rk_partition_save
}
BASH_FUNC_finish_build%%=() {  echo -e "\e[35mRunning $(basename "${BASH_SOURCE[1]}") - ${@:-${FUNCNAME[1]}} succeeded.\e[0m";
 cd "$SDK_DIR"
}
BASH_FUNC_rscript%%=() {  cd "$SCRIPTS_DIR"
}
BASH_FUNC_rk_extra_part_img%%=() {  echo "$RK_FIRMWARE_DIR/$(rk_extra_part_name $1).img"
}
BASH_FUNC_rk_partition_create%%=() {  [ "$#" -gt 1 ] || return 1;
 { 
 echo "$HDR_PART $(echo $(( $1 )) | awk '{printf "0x%08x",$1}')";
 shift;
 while [ "$1" ]; do
 NAME=$1;
 shift;
 SIZE="$(rk_partition_size_readable_to_sector $1)";
 [ -z "$1" ] || shift;
 if [ "$1" -a "$SIZE" = "-" ]; then
 echo -e "\e[35mOnly latest part can be unlimited!\e[0m";
 break;
 fi;
 echo "$NAME $SIZE";
 done
 } > "$PART_TABLE";
 rk_partition_save
}
BASH_FUNC_rk_partition_num%%=() {  echo $(( $(cat "$PART_TABLE" | wc -l) - 1 ))
}
BASH_FUNC_rk_extra_part_name%%=() {  rk_extra_part_arg ${1:-1} 2
}
BASH_FUNC_rk_partition_size_readable_to_sector%%=() {  SIZE=${1%B};
 case "${SIZE:-grow}" in 
 - | 0 | grow)
 echo '-';
 return 0
 ;;
 0x*)
 echo $SIZE;
 return 0
 ;;
 esac;
 { 
 case "$SIZE" in 
 *K)
 echo "${SIZE%K} * 2" | bc
 ;;
 *M)
 echo "${SIZE%M} * 2 * 1024" | bc
 ;;
 *G)
 echo "${SIZE%G} * 2 * 1024 * 1024" | bc
 ;;
 *)
 echo "$SIZE / 512" | bc
 ;;
 esac
 } | cut -d'.' -f1 | awk '{printf "0x%08x",$1}'
}
BASH_FUNC_rk_partition_parse%%=() {  PARAMETER="${1:-$CHIP_DIR/$RK_PARAMETER}";
 if [ ! -r "$PARAMETER" ]; then
 echo -e "\e[36m$PARAMETER not exists!\e[0m" 1>&2;
 exit 1;
 fi;
 PARTS="$(grep "^CMDLINE:" "$PARAMETER" | grep -o "0x.*")";
 echo "$HDR_PART $(echo $PARTS | awk -F '[@():]' '{print $2}')";
 echo "${PARTS//,/ }" | xargs -n 1 | awk -F '[@():]' '{print $3,$1}'
}
BASH_FUNC_rk_extra_part_builtin%%=() {  rk_extra_part_arg ${1:-1} 8 | grep -wq builtin
}
BASH_FUNC_rk_extra_part_nopack%%=() {  rk_extra_part_arg ${1:-1} 8 | grep -wq nopack
}
BASH_FUNC_rk_partition_move%%=() {  [ "$#" -gt 1 ] || return 1;
 echo $2 | grep -qE "^[0-9]*$" || return 1;
 rk_partition_parse_name $2 || return 1;
 rk_partition_parse_name $1 || return 1;
 PART=$(sed -n "/^$PART_NAME /p" "$PART_TABLE");
 NUM=$(rk_partition_num);
 if [ "$2" -eq "$NUM" ] && grep -q "\-$" "$PART_TABLE"; then
 echo -e "\e[35mCannot move after unlimited part!\e[0m";
 return 1;
 fi;
 if echo "$PART" | grep -q "\-$"; then
 echo -e "\e[35mCannot move unlimited part ($1)!\e[0m";
 return 1;
 fi;
 sed -i "/^$PART$/d" "$PART_TABLE";
 sed -i "$2 a$PART" "$PART_TABLE";
 rk_partition_save
}
BASH_FUNC_rk_partition_parse_names%%=() {  rk_partition_parse "$1" | grep -v "^$HDR_PART " | cut -d' ' -f1 | xargs
}
BASH_FUNC_rk_extra_part_prepare%%=() {  PART_NAME="$(rk_extra_part_name $1)";
 OUTDIR="$(rk_extra_part_outdir $1)";
 DST="$(rk_extra_part_img $1)";
 MOUNT_DIR="$(rk_extra_part_mount_dir $1)";
 FAKEROOT_SCRIPT="$(rk_extra_part_fakeroot_script $1)";
 SRCS="$(rk_extra_part_src $1)";
 echo "Preparing partiton $PART_NAME";
 rm -rf "$OUTDIR" "$DST" "$MOUNT_DIR" "$FAKEROOT_SCRIPT";
 if rk_extra_part_nopack $1; then
 echo "Skip preparing $PART_NAME (not packing it)";
 return 0;
 fi;
 mkdir -p "$OUTDIR";
 echo "#!/bin/sh -e" > "$FAKEROOT_SCRIPT";
 chmod a+x "$FAKEROOT_SCRIPT";
 for src in $MOUNT_DIR $SRCS;
 do
 [ -d "$src" ] || continue;
 [ "$(ls "$src/")" ] || continue;
 echo "Merging $src into $OUTDIR";
 rsync -a "$src/" "$OUTDIR";
 for f in $(ls "$OUTDIR" | grep "\.fs$" || true);
 do
 echo "Merging $src/$f into $FAKEROOT_SCRIPT";
 cat "$OUTDIR/$f" >> "$FAKEROOT_SCRIPT";
 rm -f "$OUTDIR/$f";
 done;
 done
}
BASH_FUNC_rout%%=() {  cd "$RK_OUTDIR"
}
BASH_FUNC_rcommon%%=() {  cd "$COMMON_DIR"
}
BASH_FUNC_rchip%%=() {  cd "$(realpath "$CHIP_DIR")"
}
BASH_FUNC_rk_partition_save%%=() {  PARAMETER="${1:-$CHIP_DIR/$RK_PARAMETER}";
 [ -r "$PARAMETER" ] || return 1;
 PARTS=$(rk_partition_to_cmdline);
 [ "$PARTS" ] || return 1;
 sed -i "/^CMDLINE:/s/0x.*/$PARTS/" "$PARAMETER";
 rk_partition_init
}
BASH_FUNC_kernel_version%%=() {  [ -d kernel ] || return 0;
 KERNEL_DIR="$(basename "$(realpath kernel)")";
 case "$KERNEL_DIR" in 
 kernel-*)
 echo ${KERNEL_DIR#kernel-};
 return 0
 ;;
 esac;
 kernel_version_real
}
BASH_FUNC_rk_extra_part_dev%%=() {  rk_extra_part_arg ${1:-1} 1
}
_=/usr/bin/env
